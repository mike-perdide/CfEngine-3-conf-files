# -*- python -*-
# vim: set syntax=python:

REPOSITORY = "/var/lib/gitolite/repositories/cfengine3.git"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("buildslave", "buildslave")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = GitPoller(REPOSITORY,
        workdir='gitpoller-workdir', branch='master',
        pollinterval=10)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes. In
# this case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which slaves can execute them.  Note that any
# particular build will only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand


def add_command(factory, command, description, kwargs={"haltOnFailure": True}):
    command = ShellCommand(command=command, description=description, **kwargs)
    factory.addStep(command)


factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl=REPOSITORY, mode='copy'))

# Check with cf-promises
add_command(
    factory,
    ["tests/cfpromises_check.py", "masterfiles/promises.cf"],
    ["Static analysis"],
)

# Clone a hub and a client
add_command(
    factory,
    ["tests/libvirt/clone_guests.py", "tests/libvirt/config.cfg"],
    ["Guests cloning"],
)

# Setup the network
add_command(
    factory,
    ["tests/libvirt/setup_network.py", "tests/libvirt/config.cfg"],
    ["Network setup"],
)

# Start the guests
add_command(
    factory,
    ["tests/libvirt/start_clone_guests.py", "tests/libvirt/config.cfg"],
    ["Clones start"],
)

# Push the configuration on the hub
# Run an update on the hub

# Server tests
# flunkOnFailure
# when True, a FAILURE of this build step will mark the overall build as a
# FAILURE. The remaining steps will still be executed.

# Run the update on the agent
# Client tests
# Stop the test setup
add_command(
    factory,
    ["tests/libvirt/stop_clone_guests.py", "tests/libvirt/config.cfg"],
    ["Clones stop"],
    {"alwaysRun": True}
)

# Copy the clone disks to the masters disks
add_command(
    factory,
    ["tests/libvirt/copy_clones_to_masters.py", "tests/libvirt/config.cfg"],
    ["Copying clones to", "masters"],
)

# Teardown the network
add_command(
    factory,
    ["tests/libvirt/teardown_network.py", "tests/libvirt/config.cfg"],
    ["Network teardown"],
    {"alwaysRun": True}
)

# Remove the clones
add_command(
    factory,
    ["tests/libvirt/remove_clone_guests.py", "tests/libvirt/config.cfg"],
    ["Clones removal"],
    {"alwaysRun": True}
)

# Push the configuration to production


from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="runtests",
      slavenames=["buildslave"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg = authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown=False,
    forceBuild=True,  # use this to test your slave once it is set up
    forceAllBuilds=False,
    pingBuilder=False,
    stopBuild=False,
    stopAllBuilds=False,
    cancelPendingBuild=False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# Adding an IRC bot
#from buildbot.status import words
#c['status'].append(words.IRC(host="irc.freenode.org",
#                             nick="cfengineBB",
#                             channels=["#majerteam"]))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "CfEngine"
c['titleURL'] = ""

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
